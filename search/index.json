[{"content":"项目地址 tg-bot\n前言 什么情况会用上\n手动上传 批量上传 转发上传 这是一个部署在 Cloudflare Workers 上的 Telegram 机器人。它可以接收您发送到 Telegram 的图片和视频文件，并将它们自动上传到您指定的图床或对象存储服务（需要有公开的上传接口），然后将生成的公开链接返回给您。\n本项目利用 Cloudflare Workers 的 Serverless 特性，可以实现低成本甚至免费（在 Cloudflare 免费额度内）运行。\n✨ 功能特性 自动上传: 直接向机器人发送图片或视频即可触发上传。\n支持图片和视频: 可以处理常见的图片格式和视频格式（作为视频文件或文档发送）。\n配置灵活: 通过 Cloudflare 环境变量和 Secrets 配置图床地址、Bot Token 和可选的认证信息，无需修改代码。\n部署简单: 基于 Cloudflare Workers，部署流程相对简单。\n低成本: 利用 Cloudflare 的免费套餐额度。\n安全: 敏感信息（如 Bot Token、认证代码）通过 Secrets 管理，更加安全。\n🚀 工作原理 用户在 Telegram 中向此机器人发送图片或视频。 Telegram 将包含文件信息的更新（Update）通过 Webhook 发送到 Cloudflare Worker 的 URL。 Cloudflare Worker 脚本被触发，解析收到的更新。 Worker 使用 Telegram Bot API 下载用户发送的文件。 Worker 将下载的文件上传到在环境变量 IMG_BED_URL 中配置的图床地址，（如果配置了 AUTH_CODE）会携带相应的认证参数。 Worker 解析图床返回的响应，提取公开的文件链接。 Worker 使用 Telegram Bot API 将获取到的文件链接发送回给用户。 🔧 环境要求 一个 Telegram Bot: 需要通过 BotFather 创建，并获取其 Bot Token。\n一个图床/对象存储服务:\n需要提供一个公开的 文件上传接口 URL (IMG_BED_URL)。 如果该接口需要认证，需要获取相应的 认证代码 (AUTH_CODE)。常见的简单图床可能通过 URL 参数或 Header 进行认证，本项目代码目前实现了通过 URL 参数 (authCode) 传递认证信息。 一个 Cloudflare 账户: 免费账户即可开始。\n🛠️ 部署与配置步骤 创建 Telegram Bot:\n在 Telegram 中与 @BotFather 对话。 发送 /newbot 命令，按照提示设置机器人的名称和用户名。 记下 BotFather 返回的 HTTP API token，这就是您的 BOT_TOKEN。 准备图床信息:\n确定您的图床或对象存储服务的 上传接口 URL (例如 https://your.domain/upload)。这将是 IMG_BED_URL 的值。 如果上传需要认证码，获取该认证码。这将是 AUTH_CODE 的值。如果不需要认证，则此项为空。 Fork 本项目:\nFork 本仓库。 部署 CloudFlare Worker:\n方法： 登录 Cloudflare -\u0026gt; Workers \u0026amp; Pages -\u0026gt; 创建 -\u0026gt; 导入存储库选择刚刚 fork 的仓库 -\u0026gt; 填入部署命令 npx wrangler deploy -\u0026gt; 保存并部署\n部署成功后，Wrangler 会输出您的 Worker 的访问 URL，例如 https://your-worker-name.your-subdomain.workers.dev。记下这个 URL。\n配置环境变量 (关键步骤): 您可以通过 Cloudflare Worker 仪表板设置。推荐使用密钥存储敏感信息。\n设置 BOT_TOKEN:\n网页方法: 登录 Cloudflare -\u0026gt; Workers \u0026amp; Pages -\u0026gt; 您的 Worker -\u0026gt; Settings -\u0026gt; Variables -\u0026gt; Add variable -\u0026gt; 输入 BOT_TOKEN -\u0026gt; 粘贴 Token -\u0026gt; 点击 \u0026ldquo;Encrypt\u0026rdquo; -\u0026gt; Save。 设置 AUTH_CODE(选填):\n网页方法: 类似 BOT_TOKEN，添加名为 AUTH_CODE 的变量，粘贴认证码，点击 \u0026ldquo;Encrypt\u0026rdquo; -\u0026gt; Save。 设置 IMG_BED_URL:\n网页方法: 登录 Cloudflare -\u0026gt; Workers \u0026amp; Pages -\u0026gt; 您的 Worker -\u0026gt; Settings -\u0026gt; Variables -\u0026gt; Add variable -\u0026gt; 输入 IMG_BED_URL -\u0026gt; 粘贴图床上传 URL -\u0026gt; Save。 设置 Telegram Webhook:\n需要告诉 Telegram 将机器人的更新发送到您刚刚部署的 Worker URL。\n打开浏览器，或者使用 curl 工具，访问以下链接（请务必替换 \u0026lt;YOUR_BOT_TOKEN\u0026gt; 和 \u0026lt;YOUR_WORKER_URL\u0026gt;）：\n1 https://api.telegram.org/botID/setWebhook?url=domain 例如:\n1 https://api.telegram.org/bot123456:ABC-DEF1234/setWebhook?url=https://my-tg-uploader.myusername.workers.dev 如果浏览器显示 {\u0026quot;ok\u0026quot;:true,\u0026quot;result\u0026quot;:true,\u0026quot;description\u0026quot;:\u0026quot;Webhook was set\u0026quot;} 或类似信息，则表示设置成功。\n💬 如何使用 在 Telegram 中搜索您创建的机器人的用户名，并开始对话。 发送 /start 命令给机器人（通常只需要第一次）。 发送 /help 命令可以查看简单的使用说明。 直接发送一张 图片 或一个 视频文件 给机器人。 等待片刻，机器人会将上传后的公开链接回复给您。 设置机器人命令菜单 (可选) 为了让用户在 Telegram 中更方便地使用 /start 和 /help 命令（例如通过点击输入框旁边的 / 按钮），您可以通过 BotFather 设置命令列表。这能提供命令提示，改善用户体验。\n在 Telegram 中再次与 @BotFather 对话。\n发送 /setcommands 命令。\n按照提示，选择您刚刚部署配置好的机器人。\n直接发送以下文本（确保命令和描述之间有空格和连字符，并且每个命令占一行，可以进行修改）：\n1 2 start - 启用机器人 help - 查看帮助信息 设置成功后，用户在与您的机器人对话时，点击 / 按钮就能看到这些预设的命令选项了。\n","date":"2025-04-26T15:57:04+08:00","permalink":"https://zxsos.github.io/p/telegram-bot-img-upload/","title":"Tg-bot"},{"content":"前置条件 Github 账号 CloudFlare 账号 Telegram 账号 Github 和 TG 都需要科学上网。\n--- markmap: zoom: false pan: false height: 300px backgroundColor: \u0026#34;#f8f8f8\u0026#34; --- # 前置条件： # github 设置 ## fork 仓库 ## 获取 Telegram 所需参数 ### 获得 `TG_BOT_TOKEN` ### 获取 `TG_CHAT_ID` # cloudflare 设置： ## Creat Page ## 选择刚刚 fork 的仓库 ## 设置 kv ## 绑定 kv ## 添加变量 ## RE 部署 ## 结束 github 设置 fork 仓库 进入 GitHub 项目主页：点击跳转，点击 fork\n不用设置，直接点击 create fork，到此 GitHub 的步骤就完毕可以不用管了。\n获取 Telegram 所需参数 获得 TG_BOT_TOKEN 向 @BotFather 发送 /newbot，按照提示输入 bot 的备注、用户名等信息。成功创建后获得 TG_BOT_TOKEN。\n获取 TG_CHAT_ID 创建一个新的频道（Channel），进入新建的频道，选择频道管理，将刚才创建的机器人设为频道管理员。 向 @VersaToolsBot 转发 一条第 2 步新建频道中的消息，获取 TG_CHAT_ID（频道 ID） cloudflare 设置 Creat Page 打开 cloudflare，点击左边的 work\u0026amp;page，接着点击 creat：\n选择刚刚 fork 的仓库 点击 setup，下一个页面不需要设置，直接点击下一步直至部署完成。\n设置 kv namespacename 填写: img_url，点击 add：\n绑定 kv 回到 workpage，点击自己项目进去 setting，找到下图的位置，添加 img_url，绑定到刚才添加的 kv：\n添加变量 AUTH_CODE = 进入图床的验证码 BASIC_PASS = 后台管理密码 BASIC_USER = 后台管理用户名 TG_BOT_TOKEN = 刚才让记下的添加的机器人的 api TG_CHAT_ID = tg 返回的频道信息里的频道 id\nRE 部署 再重新部署一遍，就能使用了：\n网址是 cf 给你的地址：\n也可以绑定自己的域名：\n结束 至此大功告成，输入域名就能访问了：\n","date":"2025-04-24T20:21:04+08:00","image":"https://zxsos.pages.dev/file/pic/1745778231300_20250428022341908.png","permalink":"https://zxsos.github.io/p/telegram%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/","title":"Telegram图床搭建"},{"content":"修改仓库所有者和修改 commit 信息 ( 不会更改时间线 )\n1 git filter-branch -f --env-filter \u0026#39; GIT_AUTHOR_NAME=\u0026#34;zxsos\u0026#34; GIT_AUTHOR_EMAIL=\u0026#34;my@domain\u0026#34; GIT_COMMITTER_NAME=\u0026#34;zxsos\u0026#34; GIT_COMMITTER_EMAIL=\u0026#34;my@domain \u0026#39; --tag-name-filter cat -- --branches --tags ! 可能提示不安全被废弃\n更好的解决方案（bushi） 虽然可以继续用 filter-branch，但我强烈建议改用更安全的 git filter-repo：\n先安装（如果尚未安装）：\n1 pip install git-filter-repo 执行更安全的修改：\n1 git filter-repo --name-callback \u0026#34;return b\u0026#39;xxxx\u0026#39;\u0026#34; --email-callback \u0026#34;return b\u0026#39;xxx@email.com\u0026#39;\u0026#34; --force ","date":"2025-04-24T16:24:53+08:00","image":"https://zxsos.pages.dev/file/pic/1745778090506_20250428022125434.png","permalink":"https://zxsos.github.io/p/git%E4%BF%AE%E6%94%B9/","title":"Git修改"},{"content":"1panel + gitea + docker + cloudflare + 反代 教程 准备 服务器\nCloudflare 账号\n域名\n--- markmap: zoom: false pan: false height: 300px backgroundColor: \u0026#34;#f8f8f8\u0026#34; --- # **1panel \u0026#43; gitea \u0026#43; docker \u0026#43; cloudflare \u0026#43; 反代 教程** ## 准备 ## **SSH 连接到服务器, 安装 1panel** ### **RedHat/CentOS** ### **Ubuntu** ### **Debian** ### **openEuler/ 其他系统** #### 安装 docker #### 安装 1Panel ## **浏览器进入 1panel 中, 找到商店管理** ### **安装 Mysql** ### **Gitea 安装与 SSH 配置** #### **安装 Gitea** #### **修改 SSH 配置文件** ##### 使用编辑器打开配置文件： ##### 找到并修改端口参数, 取消注释 ##### 重启 SSH 服务 ### **Gitea 配置** #### 确认信息 #### 开启电子邮件通知 #### 创建管理员账号 ## **打开** [**Cloudflare**](https://www.cloudflare-cn.com/) ### 添加域 #### 修改 DNS #### SSL 证书 #### 导入证书 #### 反向代理 #### 开启 HTTPS ## 测试一下 ### 添加公钥 ### 本地命令行输入 SSH 连接到服务器, 安装 1panel RedHat/CentOS 1 curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; sh quick_start.sh Ubuntu 1 curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; sudo bash quick_start.sh Debian 1 curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; bash quick_start.sh openEuler/ 其他系统 安装 docker 1 curl -sSL https://linuxmirrors.cn/docker.sh 安装 1Panel 1 curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; sh quick_start.sh 浏览器进入 1panel 中, 找到商店管理 安装 Mysql 版本 5.7+ 不要打开外部访问\nGitea 安装与 SSH 配置 安装 Gitea 打开外部端口访问, 域名可访问后记得关上 SSH 端口建议： 推荐使用默认端口 22，若选择其他端口（如 222 ），后续 Git 操作需使用格式： git@XX:222 若可接受此格式可跳过修改 SSH 部分 修改 SSH 配置文件 使用编辑器打开配置文件 1 sudo vi /etc/ssh/sshd_config 或者在 1panel 系统 \u0026gt; 文件中打开(建议)\n找到并修改端口参数, 取消注释 # Port 22 改为 Port 2223\nvim 操作说明： 按 i 进入编辑模式 删除 # 取消注释 修改端口号后，按 ESC → 输入 :wq 保存退出 重启 SSH 服务 1 sudo systemctl restart sshd Gitea 配置 跳过端口修改 默认是 ip:3000 以下部分可以不用修改 确认信息 开启电子邮件通知 这部分可参考 知乎-如何开启 QQ SMTP 可使用第三方 Email Sending Service 创建管理员账号 打开 Cloudflare 如果域名商有免费 SSL 证书, 那就用 , 跳过这步, 主要是泛域名太贵, cf 可以免费, 如果你只搭建 Gitea 那么推荐到原服务商获取证书, 或者在 1panel 获取 SSl 证书\n添加域 修改 DNS 按提示修改服务商 默认 DNS 为 CF 的 DNS 解析域名, 由于 SSH 的局限性不使用代理, 打开代理后 SSH 连接到的是代理主机 SSL 证书 创建证书 -\u0026gt; 下载证书 修改加密为完全(严格) 导入证书 拿到证书后回到 1panel 点击 网站-\u0026gt; 证书-\u0026gt; 上传证书 填写信息或导入 反向代理 然后点击 网站 -\u0026gt; 创建 , 选择反向代理 开启 HTTPS 确定后点击网站 配置 开启 HTTPS 关闭 Gitea 外部端口访问, 只允许域名访问\n到此结束 可以通过域名正常访问了, 也可以通过 SSH 拉取推送\n测试一下 添加公钥 本地命令行输入 1 SSH -T git@域名 如果出现以下返回就没问题了 Hi there, XXXX! You've successfully authenticated with the key named Gitea, but Gitea does not provide shell access.\n","date":"2025-04-24T15:55:12+08:00","image":"https://zxsos.pages.dev/file/pic/1745777619131_20250428021330748.png","permalink":"https://zxsos.github.io/p/set-up-gitea/","title":"搭建Gitea"}]